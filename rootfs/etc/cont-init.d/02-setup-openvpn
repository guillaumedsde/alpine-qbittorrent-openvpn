#!/usr/bin/with-contenv bash
# shellcheck shell=bash

chmod 775 /config

# create TUN device
mkdir -p /dev/net
if [ ! -c "${TUN}" ]; then
    mknod "${TUN}" c 10 200
fi
chmod 666 "${TUN}"

mkdir -p \
    '/var/run/openvpn'
chown -fR openvpn:openvpn \
    '/var/run/openvpn' || :
chmod -fR a=,ug+rwX \
    '/var/run/openvpn' || :
openvpn \
    --mktun --dev 'tun0' --dev-type 'tun' \
    --user openvpn --group openvpn

# write credentials to file
mkdir -p "$(dirname "${CREDENTIALS_FILE}")"
echo "${OPENVPN_USERNAME}" >"${CREDENTIALS_FILE}"
echo "${OPENVPN_PASSWORD}" >>"${CREDENTIALS_FILE}"

chown openvpn:openvpn "${CREDENTIALS_FILE}"
chmod 0600 "${CREDENTIALS_FILE}"

# check if VPN provider was defined
if [ -z "${OPENVPN_PROVIDER}" ]; then
    echo "OpenVPN provider not set. Using configuration at ${OPENVPN_CONFIG_FILE}"
    # if not fallback to given VPN configuration

else
    echo "INFO: Trying to use OpenVPN provider: ${OPENVPN_PROVIDER}"

    # build base URL for downloading VPN configuration
    lowercase_openvpn_provider=$(echo "${OPENVPN_PROVIDER}" | awk '{print tolower($0)}')

    # Download all OpenVPN configurations from this provider
    (
        # shellcheck disable=SC2164
        cd "/etc/openvpn"
        svn export "https://github.com/haugene/vpn-configs-contrib.git/trunk/openvpn/${lowercase_openvpn_provider}" --force
    )

    if [ -x "/etc/openvpn/${lowercase_openvpn_provider}/configure-openvpn.sh" ]; then
        echo "Provider ${OPENVPN_PROVIDER} has a custom startup script, executing it"
        # shellcheck disable=SC2034
        VPN_PROVIDER_HOME="/etc/openvpn/${lowercase_openvpn_provider}"
        # shellcheck disable=SC1090
        . "/etc/openvpn/${lowercase_openvpn_provider}/configure-openvpn.sh"
    fi

    # determine which configuration from the provider we are going to use
    # NOTE: some providers have a "default.ovpn", other do not
    OPENVPN_CONFIG_FILENAME="${OPENVPN_CONFIG:-default}.ovpn"
    DOWNLOADED_OPENVPN_CONFIG_FILE="/etc/openvpn/${lowercase_openvpn_provider}/${OPENVPN_CONFIG_FILENAME}"

    # check if configuration exists for given provider
    if [ ! -f "${DOWNLOADED_OPENVPN_CONFIG_FILE}" ]; then
        echo "ERROR: Could not find OpenVPN configuration \"${OPENVPN_CONFIG}\" for provider ${OPENVPN_PROVIDER}"
        exit 1
    else
        echo "INFO: Found OpenVPN configuration: \"${OPENVPN_CONFIG}\" for provider \"${OPENVPN_PROVIDER}\" using it"
    fi

    # modify permissions for downloaded config files
    find "/etc/openvpn/${lowercase_openvpn_provider}" -type d -exec chmod 755 {} +
    find "/etc/openvpn/${lowercase_openvpn_provider}" -type f -exec chmod 644 {} +

    # Copy the selected configuration to the expected location
    cp -p "${DOWNLOADED_OPENVPN_CONFIG_FILE}" "${OPENVPN_CONFIG_FILE}"
fi

if [ -n "${MSSFIX_OVERRIDE}" ]; then
	# If mssfix line exists
	if grep -q 'mssfix' "${OPENVPN_CONFIG_FILE}"; then
		# Override existing value
		sed -i -e 's/mssfix [0-9]*/mssfix ${MSSFIX_OVERRIDE}/' "${OPENVPN_CONFIG_FILE}"
	else
		# Add line for mssfix value
		printf 'mssfix %s' "${MSSFIX_OVERRIDE}" >>"${OPENVPN_CONFIG_FILE}"
	fi
fi

chown openvpn:openvpn "${OPENVPN_CONFIG_FILE}"
